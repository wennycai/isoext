from src.broker import starting_curve
from sage.all import *
import collections
from src.idealtoisogeny import Deuring_Context

x = var("x")
# p = 1 mod 4, p = 2 mod 3, k = 51, l = 307
p = 50519889901127100096211612493697816887201933669553741923414608897872747182081
l = ZZ(307)
k = 51
# p = 1 mod 4, p = 2 mod 3, k = 107, l = 643
# p = 40637700412308029009788596992569996606805250906279960235816467155065438351361
# l = ZZ(643)
# k = 107
# p = 1 mod 4, p = 2 mod 3, k = 200, l = 1201
# p = 55913162516425481373571649194498292876501591015930672709301382259264550174721
# l = ZZ(1201)
# k = 200
# p = 1 mod 4, p = 2 mod 3, k = 252, l = 1009
# p = 49139181582706039787278142920262584477092436049503079043059897492654038958081
# l = ZZ(1009)
# k = 252
# p = 1 mod 4, p = 2 mod 3, k = 346, l = 3461
# p = 39080947418725606808429296766910149105785171601742635268655886999006895616001
# l = ZZ(3461)
# k = 346
# p = 1 mod 4, p = 2 mod 3, k = 397, l = 2383
# p = 54836053551431778148461289426564877620230334779834907085793849531922671861761
# l = ZZ(2383)
# k = 397
# p = 1 mod 4, p = 2 mod 3, k = 470, l = 5641
# p = 51980146777764317376899789838214467900034016312224807258633370210069137088513
# l = ZZ(5641)
# k = 470
# p = 1 mod 4, p = 2 mod 3, k = 504, l = 2017
# p = 49514069746810538044618160680453043783501727017531641497308339189045991350273
# l = ZZ(2017)
# k = 504
# p = 1 mod 4, p = 2 mod 3, k = 600, l = 4801
# p = 47936541097238868575709669439207606135718050595736566430187033344579342254081
# l = ZZ(4801)
# k = 600
# p = 1 mod 4, p = 2 mod 3, k = 744, l = 5953
# p = 43369747847320181306170897106259928930782923056585648678958644971575674421249
# l = ZZ(5953)
# k = 744
# p = 1 mod 4, p = 2 mod 3, k = 940, l = 28201
# p = 56893651996855845314990170884559497875088198021359275302882959317982204772353
# l = ZZ(28201)
# k = 940
# p = 1 mod 4, p = 2 mod 3, k = 948, l = 3793
# p = 29270790387301979192886935629516082056361570481087354970797119294565959950337
# l = ZZ(3793)
# k = 948
p = 51405058224076543645883553851642371296291638873502118803240772961355286122497
l = ZZ(4423)
k = 201
p = 30640018642227096789551256358558625707287233001673090804182029868958375994369
l = ZZ(431)
k = 43
p = 48749636601058410988768638886848226928560747852793186715901674315730545928193
l = ZZ(1499)
k = 107
p = 57039045166846970605054931129890496395765064975360554321194514567106424365057
l = ZZ(10781)
k = 385
p = 47797183553605516097648344281190059644845353186941826319559231500072099299329
l = ZZ(24001)
k = 600
p = 52417662569216365679369212983112218165714177211297794304631633200853369896961
l = ZZ(28387)
k = 747
p = 40641691287314891572419256788689357903560814660705383454365136969272132756481
l = ZZ(97)
k = 24
F2 = GF(p**2, name = "i", modulus = x**2+3)
t = cputime()
E0, iota, O0 = starting_curve(F2)
print("The runtime of constructing E0:",cputime(t),"s")
print(E0)
print(O0)
################################
# Random a left ideal I of norm l.
while True:
    alpha = O0.random_element()
    if gcd(alpha.reduced_norm(),l)==l and alpha!=0:
        break
#alpha = -20*O0.gens()[0]-O0.gens()[2]+13*O0.gens()[3] #k=940
I = O0*alpha + O0*l
print("alpha = ",alpha)
facToExt = dict()
facToExt[l] = k
print(f'norm(I) = {factor(I.norm())}')
grouped = collections.defaultdict(list)
for le,k in sorted(facToExt.items()):
    grouped[k].append(le)
print('Torsion by extension degree:')

for k,les in sorted(grouped.items()):
    print(f'  {k:4}:  ', end='')
    for j,le in enumerate(les):
        print((', ' if j else '') + str(factor(le)), end='')
    print()
Deuring_ctx = Deuring_Context(O0, E0, iota, facToExt)
pari.allocatemem(23554432000000) # For big k, we may need to allocate more memory
phi_I = Deuring_ctx.IdealToIsogeny(I)